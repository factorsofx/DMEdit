/* The following code was generated by JFlex 1.4.1 on 9/13/17 9:35 AM */

package com.factorsofx.dmedit.editor.lexer;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/13/17 9:35 AM from the specification file
 * <tt>/Users/Collin/IdeaProjects/DreamSpinner/src/main/java/com/dreamspinner/view/editor/dm/DMTokenMaker.flex</tt>
 */
public class DMTokenMaker extends AbstractJFlexCTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int MLC = 1;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\12\0\1\6\26\0\1\46\1\4\1\37\1\0\1\47\1\45\1\7"+
                    "\2\0\1\11\1\41\1\0\1\43\1\3\1\10\12\2\1\0\1\40"+
                    "\1\50\1\42\1\51\1\47\1\0\32\1\1\0\1\5\1\0\1\46"+
                    "\2\0\1\12\1\27\1\33\1\23\1\14\1\26\1\34\1\36\1\35"+
                    "\1\30\1\1\1\15\1\24\1\16\1\25\1\32\1\1\1\20\1\13"+
                    "\1\21\1\17\1\31\1\22\3\1\1\0\1\44\1\0\1\47\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\2\1\1\2\1\1\1\3\1\1\1\4\1\5"+
                    "\20\1\1\4\1\5\1\1\7\5\1\6\1\7\1\6"+
                    "\3\0\1\10\5\0\1\11\1\12\1\5\1\13\23\1"+
                    "\5\0\1\5\1\14\1\15\1\2\1\10\1\15\1\10"+
                    "\1\15\7\1\1\16\2\1\1\15\3\1\7\0\1\15"+
                    "\5\1\10\0\2\1\1\17\4\0";

    private static int [] zzUnpackAction() {
        int [] result = new int[126];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\52\0\124\0\176\0\250\0\322\0\124\0\374"+
                    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
                    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
                    "\0\u03c6\0\u03f0\0\124\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
                    "\0\u0444\0\124\0\u04ec\0\u0516\0\u0540\0\u0540\0\u056a\0\u0594"+
                    "\0\u05be\0\u05e8\0\u0540\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
                    "\0\u06e4\0\u0540\0\u0540\0\176\0\u070e\0\u0738\0\u0762\0\u078c"+
                    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
                    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
                    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0540\0\u0540\0\u05be"+
                    "\0\u05e8\0\u05e8\0\u0666\0\u0666\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
                    "\0\u0bd0\0\u0bfa\0\u0c24\0\176\0\u0c4e\0\u0c78\0\176\0\u0ca2"+
                    "\0\u0ccc\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2"+
                    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
                    "\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092"+
                    "\0\u10bc\0\u0540\0\u10e6\0\u1110\0\u113a\0\u1164";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[126];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\1\5\1\3\1\6\1\3\1\7\1\10"+
                    "\1\11\1\12\1\13\1\14\1\15\1\4\1\16\1\4"+
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\4"+
                    "\1\26\1\27\1\30\1\31\2\4\1\32\1\33\1\34"+
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
                    "\6\45\1\46\2\45\1\47\40\45\35\0\1\50\15\0"+
                    "\2\4\7\0\25\4\15\0\1\5\1\51\46\0\4\52"+
                    "\1\53\1\54\27\52\1\55\14\52\5\56\1\57\1\56"+
                    "\1\53\25\56\1\60\14\56\10\0\1\61\1\62\23\0"+
                    "\1\50\4\0\1\63\20\0\1\63\23\0\1\50\4\0"+
                    "\1\63\10\0\2\4\7\0\1\4\1\64\4\4\1\65"+
                    "\1\66\15\4\14\0\2\4\7\0\20\4\1\67\4\4"+
                    "\14\0\2\4\7\0\3\4\1\70\21\4\14\0\2\4"+
                    "\7\0\2\4\1\71\2\4\1\72\17\4\14\0\2\4"+
                    "\7\0\2\4\1\73\22\4\14\0\2\4\7\0\5\4"+
                    "\1\74\4\4\1\75\12\4\14\0\2\4\7\0\24\4"+
                    "\1\76\14\0\2\4\7\0\1\77\24\4\14\0\2\4"+
                    "\7\0\13\4\1\100\11\4\14\0\2\4\7\0\15\4"+
                    "\1\101\7\4\14\0\2\4\7\0\13\4\1\102\11\4"+
                    "\14\0\2\4\7\0\1\103\1\4\1\104\22\4\14\0"+
                    "\2\4\7\0\6\4\1\105\16\4\14\0\2\4\7\0"+
                    "\13\4\1\106\11\4\14\0\2\4\7\0\3\4\1\107"+
                    "\21\4\27\0\1\110\2\0\1\111\2\0\1\112\1\113"+
                    "\11\0\1\114\51\0\1\50\3\0\2\63\44\0\1\50"+
                    "\4\0\1\63\44\0\1\50\3\0\1\63\1\0\1\63"+
                    "\43\0\1\50\4\0\1\63\1\0\1\63\42\0\1\50"+
                    "\4\0\1\63\2\0\1\63\41\0\1\50\4\0\1\63"+
                    "\5\0\1\115\1\63\35\0\1\50\4\0\1\63\6\0"+
                    "\1\115\62\0\1\116\67\0\1\117\25\0\1\120\47\0"+
                    "\4\52\1\53\1\54\50\52\1\121\1\54\50\52\1\53"+
                    "\1\54\20\52\1\122\23\52\5\56\1\57\1\56\1\53"+
                    "\47\56\1\57\1\56\1\123\47\56\1\57\1\56\1\53"+
                    "\16\56\1\124\23\56\6\61\1\0\43\61\1\0\2\4"+
                    "\7\0\2\4\1\125\22\4\14\0\2\4\7\0\13\4"+
                    "\1\126\11\4\14\0\2\4\7\0\1\127\24\4\14\0"+
                    "\2\4\7\0\1\4\1\130\23\4\14\0\2\4\7\0"+
                    "\10\4\1\64\14\4\14\0\2\4\7\0\3\4\1\131"+
                    "\21\4\14\0\2\4\7\0\7\4\1\132\15\4\14\0"+
                    "\2\4\7\0\6\4\1\133\16\4\14\0\2\4\7\0"+
                    "\20\4\1\134\4\4\14\0\2\4\7\0\23\4\1\135"+
                    "\1\4\14\0\2\4\7\0\7\4\1\136\15\4\14\0"+
                    "\2\4\7\0\15\4\1\134\7\4\14\0\2\4\7\0"+
                    "\16\4\1\134\6\4\14\0\2\4\7\0\6\4\1\137"+
                    "\16\4\14\0\2\4\7\0\6\4\1\134\16\4\14\0"+
                    "\2\4\7\0\6\4\1\100\16\4\14\0\2\4\7\0"+
                    "\13\4\1\140\11\4\14\0\2\4\7\0\4\4\1\141"+
                    "\20\4\14\0\2\4\7\0\13\4\1\142\11\4\30\0"+
                    "\1\143\1\144\1\0\1\145\47\0\1\146\45\0\1\147"+
                    "\53\0\1\150\53\0\1\151\7\0\1\152\65\0\1\63"+
                    "\10\0\2\4\7\0\1\134\24\4\14\0\2\4\7\0"+
                    "\12\4\1\134\12\4\14\0\2\4\7\0\10\4\1\153"+
                    "\14\4\14\0\2\4\7\0\2\4\1\64\22\4\14\0"+
                    "\2\4\7\0\3\4\1\64\21\4\14\0\2\4\7\0"+
                    "\5\4\1\154\17\4\14\0\2\4\7\0\14\4\1\134"+
                    "\10\4\14\0\2\4\7\0\3\4\1\155\21\4\14\0"+
                    "\2\4\7\0\5\4\1\126\17\4\14\0\2\4\7\0"+
                    "\21\4\1\134\3\4\14\0\2\4\7\0\1\4\1\156"+
                    "\23\4\14\0\2\4\7\0\15\4\1\157\7\4\26\0"+
                    "\1\160\21\0\1\161\37\0\1\162\46\0\1\163\54\0"+
                    "\1\164\46\0\1\165\57\0\1\166\56\0\1\167\34\0"+
                    "\1\146\4\0\1\164\27\0\2\4\7\0\4\4\1\137"+
                    "\20\4\14\0\2\4\7\0\6\4\1\170\16\4\14\0"+
                    "\2\4\7\0\2\4\1\137\22\4\14\0\2\4\7\0"+
                    "\7\4\1\134\15\4\14\0\2\4\7\0\1\171\24\4"+
                    "\27\0\1\172\63\0\1\172\60\0\1\161\41\0\1\173"+
                    "\40\0\1\161\53\0\1\172\70\0\1\174\31\0\1\175"+
                    "\35\0\2\4\7\0\4\4\1\64\20\4\14\0\2\4"+
                    "\7\0\3\4\1\134\21\4\33\0\1\172\47\0\1\160"+
                    "\52\0\1\176\55\0\1\160\26\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[4494];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\42\1\2\11\1\1\3\0\1\11\5\0\1\1"+
                    "\2\11\24\1\5\0\1\1\2\11\23\1\7\0\6\1"+
                    "\10\0\2\1\1\11\4\0";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[126];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the textposition at the last state to be included in yytext */
    private int zzPushbackPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

  /* user code: */

    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public DMTokenMaker() {
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *        occurs.
     * @param hyperlink Whether this token is a hyperlink.
     */
    public void addToken(char[] array, int start, int end, int tokenType,
                         int startOffset, boolean hyperlink) {
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Returns the text to place at the beginning and end of a
     * line to "comment" it in a this programming language.
     *
     * @return The start and end strings to add to a line to "comment"
     *         it out.
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[] { "//", null };
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

// Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;

/* No documentation comments */
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(Reader reader) {
// 's' has been updated.
        zzBuffer = s.array;
/*
* We replaced the line below with the two below it because zzRefill
* no longer "refills" the buffer (since the way we do it, it's always
* "full" the first time through, since it points to the segment's
* array).  So, we assign zzEndRead here.
*/
//zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
    }



    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public DMTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public DMTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 120) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }



    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 11:
                { addToken(Token.RESERVED_WORD);
                }
                case 16: break;
                case 10:
                { start = zzMarkedPos - 2; yybegin(MLC);
                }
                case 17: break;
                case 7:
                { addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE); return firstToken;
                }
                case 18: break;
                case 1:
                { addToken(Token.IDENTIFIER);
                }
                case 19: break;
                case 13:
                { addToken(Token.FUNCTION);
                }
                case 20: break;
                case 9:
                { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
                }
                case 21: break;
                case 8:
                { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 22: break;
                case 14:
                { addToken(Token.RESERVED_WORD_2);
                }
                case 23: break;
                case 15:
                { addToken(Token.PREPROCESSOR);
                }
                case 24: break;
                case 12:
                { yybegin(YYINITIAL); addToken(start, zzStartRead + 2 - 1, Token.COMMENT_MULTILINE);
                }
                case 25: break;
                case 5:
                { addToken(Token.OPERATOR);
                }
                case 26: break;
                case 2:
                { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 27: break;
                case 3:
                { addNullToken(); return firstToken;
                }
                case 28: break;
                case 6:
                {
                }
                case 29: break;
                case 4:
                { addToken(Token.SEPARATOR);
                }
                case 30: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken(); return firstToken;
                            }
                            case 127: break;
                            case MLC: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE); return firstToken;
                            }
                            case 128: break;
                            default:
                                return null;
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
